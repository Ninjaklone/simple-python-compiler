
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COLON COMMA COMMENT DELIM DOT IDENT KEYWORD L_BRACE L_BRACKET L_PAREN NEWLINE NUMBER_FLOAT NUMBER_INT OP_ARITH OP_BITWISE OP_COMP OP_LOGIC R_BRACE R_BRACKET R_PAREN SEMICOLON SKIP STRINGprogram : statement_liststatement_list : statement\n                        | statement_list statementstatement : assignment_statement\n                    | expression_statement\n                    | if_statement\n                    | while_statement\n                    | for_statement\n                    | function_def\n                    | return_statement\n                    | compound_statementassignment_statement : IDENT ASSIGN expression NEWLINEexpression_statement : expression NEWLINEexpression : arithmetic_expr\n                     | comparison_expr\n                     | logical_expr\n                     | atomarithmetic_expr : expression OP_ARITH expressioncomparison_expr : expression OP_COMP expressionlogical_expr : expression OP_LOGIC expressionatom : IDENT\n               | NUMBER_INT\n               | NUMBER_FLOAT\n               | STRING\n               | L_PAREN expression R_PARENif_statement : KEYWORD expression COLON compound_statement\n                       | KEYWORD expression COLON compound_statement KEYWORD compound_statementwhile_statement : KEYWORD expression COLON compound_statementfor_statement : KEYWORD IDENT KEYWORD expression COLON compound_statementfunction_def : KEYWORD IDENT L_PAREN parameter_list R_PAREN COLON compound_statementparameter_list : IDENT\n                        | parameter_list COMMA IDENT\n                        | compound_statement : NEWLINE statement_listreturn_statement : KEYWORD expression NEWLINE'
    
_lr_action_items = {'IDENT':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,24,25,26,27,28,29,30,40,41,42,44,45,52,53,54,57,],[12,12,-2,-4,-5,-6,-7,-8,-9,-10,-11,12,32,34,-3,34,-13,34,34,34,12,-35,34,47,-12,-26,56,-27,-29,-30,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,10,11,14,24,26,30,32,40,44,45,53,54,57,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-11,15,-3,-13,15,41,-35,-12,49,-27,-29,-30,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,24,26,30,31,32,34,35,36,37,38,39,40,43,44,45,49,50,53,54,55,57,],[14,14,-2,-4,-5,-6,-7,-8,-9,-10,-11,-21,26,14,-14,-15,-16,-17,-22,-23,-24,-3,-13,14,40,-21,-21,44,-18,-19,-20,14,-35,-25,-12,-26,14,14,-27,-29,14,-30,]),'NUMBER_INT':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,24,25,26,27,28,29,30,40,41,44,45,53,54,57,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,21,21,21,-3,21,-13,21,21,21,21,-35,21,-12,-26,-27,-29,-30,]),'NUMBER_FLOAT':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,24,25,26,27,28,29,30,40,41,44,45,53,54,57,],[22,22,-2,-4,-5,-6,-7,-8,-9,-10,-11,22,22,22,-3,22,-13,22,22,22,22,-35,22,-12,-26,-27,-29,-30,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,24,25,26,27,28,29,30,40,41,44,45,53,54,57,],[23,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,23,23,23,-3,23,-13,23,23,23,23,-35,23,-12,-26,-27,-29,-30,]),'L_PAREN':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,24,25,26,27,28,29,30,32,40,41,44,45,53,54,57,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-11,16,16,16,-3,16,-13,16,16,16,16,42,-35,16,-12,-26,-27,-29,-30,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,24,26,30,40,44,45,53,54,57,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-3,-13,-34,-35,-12,-26,-27,-29,-30,]),'ASSIGN':([12,],[25,]),'OP_ARITH':([12,13,17,18,19,20,21,22,23,31,32,33,34,35,36,37,38,43,46,],[-21,27,-14,-15,-16,-17,-22,-23,-24,27,-21,27,-21,27,27,27,27,-25,27,]),'OP_COMP':([12,13,17,18,19,20,21,22,23,31,32,33,34,35,36,37,38,43,46,],[-21,28,-14,-15,-16,-17,-22,-23,-24,28,-21,28,-21,28,28,28,28,-25,28,]),'OP_LOGIC':([12,13,17,18,19,20,21,22,23,31,32,33,34,35,36,37,38,43,46,],[-21,29,-14,-15,-16,-17,-22,-23,-24,29,-21,29,-21,29,29,29,29,-25,29,]),'COLON':([17,18,19,20,21,22,23,31,32,34,36,37,38,43,46,51,],[-14,-15,-16,-17,-22,-23,-24,39,-21,-21,-18,-19,-20,-25,50,55,]),'R_PAREN':([17,18,19,20,21,22,23,33,34,36,37,38,42,43,47,48,56,],[-14,-15,-16,-17,-22,-23,-24,43,-21,-18,-19,-20,-33,-25,-31,51,-32,]),'COMMA':([42,47,48,56,],[-33,-31,52,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,14,],[2,30,]),'statement':([0,2,14,30,],[3,24,3,24,]),'assignment_statement':([0,2,14,30,],[4,4,4,4,]),'expression_statement':([0,2,14,30,],[5,5,5,5,]),'if_statement':([0,2,14,30,],[6,6,6,6,]),'while_statement':([0,2,14,30,],[7,7,7,7,]),'for_statement':([0,2,14,30,],[8,8,8,8,]),'function_def':([0,2,14,30,],[9,9,9,9,]),'return_statement':([0,2,14,30,],[10,10,10,10,]),'compound_statement':([0,2,14,30,39,49,50,55,],[11,11,11,11,45,53,54,57,]),'expression':([0,2,14,15,16,25,27,28,29,30,41,],[13,13,13,31,33,35,36,37,38,13,46,]),'arithmetic_expr':([0,2,14,15,16,25,27,28,29,30,41,],[17,17,17,17,17,17,17,17,17,17,17,]),'comparison_expr':([0,2,14,15,16,25,27,28,29,30,41,],[18,18,18,18,18,18,18,18,18,18,18,]),'logical_expr':([0,2,14,15,16,25,27,28,29,30,41,],[19,19,19,19,19,19,19,19,19,19,19,]),'atom':([0,2,14,15,16,25,27,28,29,30,41,],[20,20,20,20,20,20,20,20,20,20,20,]),'parameter_list':([42,],[48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',17),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',23),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',31),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',33),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',34),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> function_def','statement',1,'p_statement','parser.py',36),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',38),
  ('assignment_statement -> IDENT ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','parser.py',43),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','parser.py',53),
  ('expression -> arithmetic_expr','expression',1,'p_expression','parser.py',58),
  ('expression -> comparison_expr','expression',1,'p_expression','parser.py',59),
  ('expression -> logical_expr','expression',1,'p_expression','parser.py',60),
  ('expression -> atom','expression',1,'p_expression','parser.py',61),
  ('arithmetic_expr -> expression OP_ARITH expression','arithmetic_expr',3,'p_arithmetic_expr','parser.py',65),
  ('comparison_expr -> expression OP_COMP expression','comparison_expr',3,'p_comparison_expr','parser.py',74),
  ('logical_expr -> expression OP_LOGIC expression','logical_expr',3,'p_logical_expr','parser.py',83),
  ('atom -> IDENT','atom',1,'p_atom','parser.py',93),
  ('atom -> NUMBER_INT','atom',1,'p_atom','parser.py',94),
  ('atom -> NUMBER_FLOAT','atom',1,'p_atom','parser.py',95),
  ('atom -> STRING','atom',1,'p_atom','parser.py',96),
  ('atom -> L_PAREN expression R_PAREN','atom',3,'p_atom','parser.py',97),
  ('if_statement -> KEYWORD expression COLON compound_statement','if_statement',4,'p_if_statement','parser.py',105),
  ('if_statement -> KEYWORD expression COLON compound_statement KEYWORD compound_statement','if_statement',6,'p_if_statement','parser.py',106),
  ('while_statement -> KEYWORD expression COLON compound_statement','while_statement',4,'p_while_statement','parser.py',123),
  ('for_statement -> KEYWORD IDENT KEYWORD expression COLON compound_statement','for_statement',6,'p_for_statement','parser.py',131),
  ('function_def -> KEYWORD IDENT L_PAREN parameter_list R_PAREN COLON compound_statement','function_def',7,'p_function_def','parser.py',141),
  ('parameter_list -> IDENT','parameter_list',1,'p_parameter_list','parser.py',150),
  ('parameter_list -> parameter_list COMMA IDENT','parameter_list',3,'p_parameter_list','parser.py',151),
  ('parameter_list -> <empty>','parameter_list',0,'p_parameter_list','parser.py',152),
  ('compound_statement -> NEWLINE statement_list','compound_statement',2,'p_compound_statement','parser.py',161),
  ('return_statement -> KEYWORD expression NEWLINE','return_statement',3,'p_return_statement','parser.py',165),
]
