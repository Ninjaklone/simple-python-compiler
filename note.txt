steps = [1489, 1242, 1389, 1516, 1520, 1479, 1177, 1124, 1210, 1494, 1258, 1407, 1325, 
1270, 1432, 1192, 1327, 1349, 1120, 1175, 1193, 1196, 1506, 1473, 1268, 1235, 
1189, 1321, 1419, 1187, 1464, 1170, 1326, 1392, 1268, 1228, 1509, 1414, 1499, 
1137, 1467, 1284, 1262, 1122, 1221, 1236, 1248, 1168, 1305, 1326, 1159, 1270, 
1284, 1405, 1536, 1397, 1266, 1519, 1267, 1561, 1220, 1362, 1351, 1461, 1238, 
1432, 1129, 1561, 1319, 1496, 1136, 1402, 1157, 1189, 1485, 1263, 1133, 1169, 
1134, 1314, 1232, 1205, 1179, 1351, 1288, 1316, 1256, 1552, 1498, 1254]


class TestLexer(unittest.TestCase):
    def setUp(self):
        self.lexer = Lexer()

    def test_tokenization(self):
        input_code = """if(i==j)
                        z=0;
                        else
                        z=1;"""
        expected_tokens = ['if', '(', 'i', '==', 'j', ')', 'z', '=', '0', ';', 'else', 'z', '=', '1', ';']
        actual_tokens = self.lexer.lexerFunc(input_code)
        self.assertEqual(actual_tokens, expected_tokens)

if __name__ == '__main__':
    unittest.main()


input_code = open('note.txt','r').read()


section .data
    number_of_students db 90
    distance_in_meters dd 1000.0
    average_stride_length dd 0.78
    message db "The average number of steps required for each student to complete the walk is approximately: ", 0
    fmt db "%f", 10, 0  ; Format string for printf with newline

section .bss
    steps_per_student resd 1

section .text
    global _main
    extern _printf
    extern _exit

_main:
    ; Set up stack frame
    push ebp
    mov ebp, esp
    
    ; Load distance into FPU stack
    fld dword [distance_in_meters]
    fld dword [average_stride_length]
    
    ; Perform division
    fdivp st1, st0
    
    ; Store the result
    fstp dword [steps_per_student]
    
    ; Print message
    push message
    call _printf
    add esp, 4
    
    ; Print result
    fld dword [steps_per_student]
    sub esp, 8          ; Allocate space for double
    fstp qword [esp]    ; Store double value
    push fmt
    call _printf
    add esp, 12         ; Clean up stack
    
    ; Exit program
    xor eax, eax
    mov esp, ebp
    pop ebp
    ret



